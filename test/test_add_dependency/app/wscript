#! /usr/bin/env python
# encoding: utf-8

APPNAME = 'test_add_dependency'
VERSION = '1.0.0'

import os
import shutil

import waflib
from waflib.extras.wurf.git import Git

class CloneError(Exception):
    """Basic """
    def __init__(self, repository):
        super(CloneError, self).__init__(
            "No mapping for repository {} found!".format(repository))


def resolve(ctx):


    # This mapping is use when performing a "fake" git clone.
    #
    # In the tests we will make "fake" git repositories available
    # under the 'git_dir' folder using the following mapping.
    # For the a given git URL the value in the dict below gives
    # the directory name in the 'git_dir'.
    libraries = {'github.com/acme-corp/foo.git': 'libfoo',
                 'gitlab.com/acme-corp/bar.git': 'libbar',
                 'gitlab.com/acme/baz.git': 'libbaz' }

    class FakeGitClone(Git):

        def __init__(self, git_binary, ctx, libraries):
            super(FakeGitClone, self).__init__(
                git_binary=git_binary, ctx=ctx)

            # This is the directory on the file system which contains the
            # test libraries. We use the url in the clone(...) function
            # to find the library needed

            self.git_dir = ctx.path.parent.find_node('git_dir')
            self.libraries = libraries

        def clone(self, repository, directory, cwd):

            dst_directory = os.path.join(cwd, directory)

            for lib_repository, lib_name in self.libraries.items():
                if repository.endswith(lib_repository):

                    lib_node = self.git_dir.find_node(lib_name)

                    if not lib_node:
                        raise CloneError(repository=repository)

                    lib_directory = self.git_dir.find_node(lib_name).abspath()

                    shutil.copytree(src=lib_directory, dst=dst_directory)

                    assert os.path.isdir(dst_directory), "We should have a valid path here!"
                    return

            else:
                raise CloneError(repository=repository)

    def build_fake_git(registry):
        git_binary = registry.require('git_binary')
        ctx = registry.require('ctx')

        return FakeGitClone(git_binary=git_binary, ctx=ctx, libraries=libraries)


    # Get the registry and replace the git builder
    registry = ctx.registry
    registry.provide('git', build_fake_git, override=True)

    # Rebuild the dependency manager
    ctx.dependency_manager = registry.require('dependency_manager')

    ctx.add_dependency(
        name='foo',
        recurse=True,
        optional=False,
        resolver='git',
        method='checkout',
        checkout='1.3.3.7',
        sources=['github.com/acme-corp/foo.git'])

    ctx.add_dependency(
        name='baz',
        recurse=True,
        optional=False,
        resolver='git',
        method='semver',
        major=3,
        sources=['gitlab.com/acme/baz.git'])

def options(opt):

    opt.load('compiler_cxx')

def configure(conf):
    conf.load('compiler_cxx')


def build(bld):

    bld.program(features='cxx',
                source='main.cpp',
                target='app',
                use=['foo', 'baz'])
